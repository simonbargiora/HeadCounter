{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOZnBscxzeApdzLyIxm4n1Z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/simonbargiora/HeadCounter/blob/master/infinity%20measurement%20of%20spheres%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import numpy as np\n",
        "import math\n",
        "from scipy.spatial import distance\n",
        "from scipy import integrate\n",
        "from sympy import Matrix\n",
        "\n",
        "\n",
        "def x_coordinate_to_radial_distance(y, z, x):\n",
        "    return math.sqrt(y ** 2 + z ** 2 + x ** 2)\n",
        "\n",
        "def y_coordinate_to_radial_distance(x, z, y):\n",
        "    return math.sqrt(x ** 2 + z ** 2 + y ** 2)\n",
        "\n",
        "def z_coordinate_to_radial_distance(x, y, z):\n",
        "    return math.sqrt(x ** 2 + y ** 2 + z ** 2)\n",
        "\n",
        "def radial_distance_to_x_coordinate(r, theta, phi):\n",
        "    return r * math.cos(theta) * math.sin(phi)\n",
        "\n",
        "def radial_distance_to_y_coordinate(r, theta, phi):\n",
        "    return r * math.sin(theta) * math.sin(phi)\n",
        "\n",
        "def radial_distance_to_z_coordinate(r, phi):\n",
        "    return r * math.cos(phi)\n",
        "\n",
        "def azimuthal_angle_to_polar_angle(theta, r):\n",
        "    return theta / np.tan(r)\n",
        "\n",
        "def polar_angle_to_azimuthal_angle(phi, r):\n",
        "    return phi * np.tan(r)\n",
        "\n",
        "def polar_angle_to_radial_distance(phi, theta):\n",
        "    return theta / np.tan(phi)\n",
        "\n",
        "def radial_distance_to_polar_angle(r, theta):\n",
        "    return r * np.tan(theta)\n",
        "\n",
        "def azimuthal_angle_to_radial_distance(theta, phi):\n",
        "    return theta / np.tan(phi)\n",
        "\n",
        "def radial_distance_to_azimuthal_angle(r, phi):\n",
        "    return r * np.tan(phi)\n",
        "\n",
        "def radial_distance_to_x_coordinate(r, theta, phi):\n",
        "    return r * np.cos(theta) * np.sin(phi)\n",
        "\n",
        "def radial_distance_to_y_coordinate(r, theta, phi):\n",
        "    return r * np.sin(theta) * np.sin(phi)\n",
        "\n",
        "def radial_distance_to_z_coordinate(r, phi):\n",
        "    return r * np.cos(phi)\n",
        "\n",
        "def x_coordinate_to_volume(x):\n",
        "    return (4 / 3) * math.pi * (np.sqrt(y_coordinates ** 2 + z_coordinates ** 2 + x ** 2)) ** 3\n",
        "\n",
        "def y_coordinate_to_volume(y):\n",
        "    return (4 / 3) * math.pi * (np.sqrt(x_coordinates ** 2 + z_coordinates ** 2 + y ** 2)) ** 3\n",
        "\n",
        "def z_coordinate_to_volume(z):\n",
        "    return (4 / 3) * math.pi * (np.sqrt(x_coordinates ** 2 + y_coordinates ** 2 + z ** 2)) ** 3\n",
        "\n",
        "def x_coordinate_to_surface_area(x):\n",
        "    return 4 * math.pi * (np.sqrt(y_coordinates ** 2 + z_coordinates ** 2 + x ** 2)) ** 2\n",
        "\n",
        "def y_coordinate_to_surface_area(y):\n",
        "    return 4 * math.pi * (np.sqrt(x_coordinates ** 2 + z_coordinates ** 2 + y ** 2)) ** 2\n",
        "\n",
        "def z_coordinate_to_surface_area(z):\n",
        "    return 4 * math.pi * (np.sqrt(x_coordinates ** 2 + y_coordinates ** 2 + z ** 2)) ** 2\n",
        "\n",
        "def x_coordinate_to_circumference(x):\n",
        "    return 2 * math.pi * np.sqrt(y_coordinates ** 2 + z_coordinates ** 2 + x ** 2)\n",
        "\n",
        "def y_coordinate_to_circumference(y):\n",
        "    return 2 * math.pi * np.sqrt(x_coordinates ** 2 + z_coordinates ** 2 + y ** 2)\n",
        "\n",
        "def z_coordinate_to_circumference(z):\n",
        "    return 2 * math.pi * np.sqrt(x_coordinates ** 2 + y_coordinates ** 2 + z ** 2)\n",
        "def z_coordinate_to_latitude(z, r):\n",
        "    return math.asin(z / r)\n",
        "\n",
        "def calculate_longitude(x, y):\n",
        " return longitude\n",
        "def generate_random_points(num_points):\n",
        "    points = []\n",
        "    for _ in range(num_points):\n",
        "        # Generate random Cartesian coordinates on the sphere\n",
        "        x = random.uniform(-1, 1)\n",
        "        y = random.uniform(-1, 1)\n",
        "        z = random.uniform(-1, 1)\n",
        "\n",
        "        # Normalize the coordinates to lie on the sphere\n",
        "        magnitude = math.sqrt(x**2 + y**2 + z**2)\n",
        "        x /= magnitude\n",
        "        y /= magnitude\n",
        "        z /= magnitude\n",
        "\n",
        "        points.append((x, y, z))\n",
        "\n",
        "    return points\n",
        "\n",
        "def calculate_latitude_longitude(points):\n",
        "    latitudes = []\n",
        "    longitudes = []\n",
        "\n",
        "    for point in points:\n",
        "        x, y, z = point\n",
        "        longitude = math.degrees(math.atan2(y, x))\n",
        "        latitude = math.degrees(math.asin(z))\n",
        "\n",
        "        latitudes.append(latitude)\n",
        "        longitudes.append(longitude)\n",
        "\n",
        "    return latitudes, longitudes\n",
        "\n",
        "def calculate_longitude(x, y):\n",
        "    # Calculate the longitude for a point given x and y coordinates\n",
        "    longitude = math.degrees(math.atan2(y, x))\n",
        "    return longitude\n",
        "\n",
        "def divide_into_hemispheres(points):\n",
        "    hemisphere1 = []\n",
        "    hemisphere2 = []\n",
        "\n",
        "    for point in points:\n",
        "        x, y, z = point\n",
        "\n",
        "        if z >= 0:\n",
        "            hemisphere1.append(point)\n",
        "        else:\n",
        "            hemisphere2.append(point)\n",
        "\n",
        "    return hemisphere1, hemisphere2\n",
        "\n",
        "def calculate_latitude_longitude(points):\n",
        "    latitudes = []\n",
        "    longitudes = []\n",
        "\n",
        "    for point in points:\n",
        "        x, y, z = point\n",
        "        longitude = calculate_longitude(x, y)\n",
        "        latitude = math.degrees(math.asin(z))\n",
        "\n",
        "        latitudes.append(latitude)\n",
        "        longitudes.append(longitude)\n",
        "\n",
        "    return latitudes, longitudes\n",
        "\n",
        "def calculate_sector_area(theta, radius):\n",
        "    # Calculate the area of a sector on the sphere given the central angle and radius\n",
        "    sector_area = (theta / 360) * (4 * math.pi * radius ** 2)\n",
        "    return sector_area\n",
        "central_angles = [30, 45, 60, 90]\n",
        "def calculate_segment_area(theta, radius):\n",
        " segment_area = (theta / 360) * (math.pi * radius ** 2)\n",
        " return segment_area\n",
        "central_angles = [30, 45, 60, 90]\n",
        "def calculate_spherical_cap_surface_area(radius, height):\n",
        "    # Calculate the surface area of a spherical cap given the radius (r) and height (h)\n",
        "    surface_area = 2 * math.pi * radius * height\n",
        "    return surface_area\n",
        "def calculate_spherical_cap_volume(radius, height):\n",
        "    # Calculate the volume of a spherical cap given the radius (r) and height (h)\n",
        "    volume = (1/3) * math.pi * height**2 * (3*radius - height)\n",
        "    return volume\n",
        "def calculate_spherical_zone_surface_area(radius, height):\n",
        "    # Calculate the surface area of a spherical zone given the radius (R) and height (h)\n",
        "    surface_area = 2 * math.pi * radius * height\n",
        "    return surface_area\n",
        "\n",
        "def calculate_spherical_zone_volume(radius, r, height):\n",
        "    # Calculate the volume of a spherical zone given the radius (R), inner radius (r), and height (h)\n",
        "    volume = math.pi * height * (radius**2 - r**2)\n",
        "    return volume\n",
        "def calculate_spherical_segment_volume(area, radius, min_height, max_height):\n",
        "    # Calculate the volume of a spherical segment given the area, radius (R), minimum height (h1),\n",
        "    # and maximum height (h2)\n",
        "    height = max_height - min_height\n",
        "    volume = (1/3) * area * height * (3*radius - height)\n",
        "    return volume\n",
        "def calculate_spherical_triangle_area(radius, alpha, beta, gamma):\n",
        "    # Calculate the area of a spherical triangle given the radius (R) and angles (α, β, γ)\n",
        "    area = radius**2 * (alpha + beta + gamma - math.pi)\n",
        "    return area\n",
        "def calculate_spherical_triangle_angles(a, b, c):\n",
        "    # Calculate the angles of a spherical triangle given the distances between the vertices (a, b, c)\n",
        "    cos_alpha = math.cos(a) - math.cos(b) * math.cos(c)\n",
        "    cos_beta = math.cos(b) - math.cos(a) * math.cos(c)\n",
        "    cos_gamma = math.cos(c) - math.cos(a) * math.cos(b)\n",
        "\n",
        "    alpha = math.acos(cos_alpha)\n",
        "    beta = math.acos(cos_beta)\n",
        "    gamma = math.acos(cos_gamma)\n",
        "\n",
        "    return alpha, beta, gamma\n",
        "def generate_random_spherical_coordinates():\n",
        "    # Generate random spherical coordinates on the surface of a sphere\n",
        "    theta = random.uniform(0, 2*math.pi)  # Azimuthal angle (0 to 2π)\n",
        "    phi = random.uniform(0, math.pi)      # Polar angle (0 to π)\n",
        "\n",
        "    return theta, phi\n",
        "\n",
        "def convert_spherical_to_cartesian(theta, phi, radius):\n",
        "    # Convert spherical coordinates to Cartesian coordinates\n",
        "    x = radius * math.sin(phi) * math.cos(theta)\n",
        "    y = radius * math.sin(phi) * math.sin(theta)\n",
        "    z = radius * math.cos(phi)\n",
        "\n",
        "    return x, y, z\n",
        "\n",
        "def calculate_spherical_triangle_angles(a, b, c):\n",
        "    # Calculate the angles of a spherical triangle given the distances between the vertices (a, b, c)\n",
        "    cos_alpha = math.cos(a) - math.cos(b) * math.cos(c)\n",
        "    cos_beta = math.cos(b) - math.cos(a) * math.cos(c)\n",
        "    cos_gamma = math.cos(c) - math.cos(a) * math.cos(b)\n",
        "\n",
        "    alpha = math.acos(cos_alpha)\n",
        "    beta = math.acos(cos_beta)\n",
        "    gamma = math.acos(cos_gamma)\n",
        "\n",
        "    return alpha, beta, gamma\n",
        "\n",
        "def calculate_spherical_triangle_area(radius, alpha, beta, gamma):\n",
        "    # Calculate the area of a spherical triangle given the radius (R) and angles (α, β, γ)\n",
        "    area = radius**2 * (alpha + beta + gamma - math.pi)\n",
        "    return area\n",
        "def calculate_law_of_sines_sides(a, b, c, A, B, C):\n",
        "    # Calculate the missing sides of a triangle using the Law of Sines\n",
        "    sin_A = math.sin(A)\n",
        "    sin_B = math.sin(B)\n",
        "    sin_C = math.sin(C)\n",
        "\n",
        "    if a == 0:  # Calculate side a\n",
        "        a = (sin_A * b) / sin_B\n",
        "        c = (sin_C * b) / sin_B\n",
        "    elif b == 0:  # Calculate side b\n",
        "        b = (sin_B * a) / sin_A\n",
        "        c = (sin_C * a) / sin_A\n",
        "    else:  # Calculate side c\n",
        "        c = (sin_C * a) / sin_A\n",
        "        b = (sin_B * a) / sin_A\n",
        "\n",
        "    return a, b, c, A, B, C\n",
        "def calculate_law_of_tangents(a, b, c, A, B, C):\n",
        "    # Calculate the missing angles of a spherical triangle using the Law of Tangents\n",
        "    tan_a2 = math.tan(a/2)\n",
        "    tan_b2 = math.tan(b/2)\n",
        "    tan_c2 = math.tan(c/2)\n",
        "\n",
        "    if A == 0:  # Calculate angle A\n",
        "        A = 2 * math.atan(tan_a2 / (tan_b2 * tan_c2 * math.sin(B)))\n",
        "    elif B == 0:  # Calculate angle B\n",
        "        B = 2 * math.atan(tan_b2 / (tan_a2 * tan_c2 * math.sin(A)))\n",
        "    else:  # Calculate angle C\n",
        "        C = 2 * math.atan(tan_c2 / (tan_a2 * tan_b2 * math.sin(A)))\n",
        "\n",
        "    return a, b, c, A, B, C\n",
        "def calculate_spherical_polygon_area(radius, spherical_triangles):\n",
        "    # Calculate the area of a spherical polygon given the radius (R) and a list of spherical triangles\n",
        "    total_area = 0.0\n",
        "\n",
        "    # Calculate the sum of spherical triangles\n",
        "    for triangle in spherical_triangles:\n",
        "        alpha, beta, gamma = triangle\n",
        "\n",
        "        # Calculate the area of the spherical triangle\n",
        "        triangle_area = radius**2 * (alpha + beta + gamma - math.pi)\n",
        "        total_area += triangle_area\n",
        "\n",
        "    # Calculate the excess angle\n",
        "    excess = (len(spherical_triangles) - 2) * math.pi\n",
        "\n",
        "    # Calculate the area of the spherical polygon\n",
        "    polygon_area = total_area + (2*math.pi*radius*excess)\n",
        "    return polygon_area\n",
        "def generate_random_point_on_sphere(radius):\n",
        "    # Generate random spherical coordinates for a point on a sphere\n",
        "    theta = random.uniform(0, 2*math.pi)\n",
        "    phi = random.uniform(0, math.pi)\n",
        "\n",
        "    # Convert spherical coordinates to Cartesian coordinates\n",
        "    x = radius * math.sin(phi) * math.cos(theta)\n",
        "    y = radius * math.sin(phi) * math.sin(theta)\n",
        "    z = radius * math.cos(phi)\n",
        "\n",
        "    return x, y, z\n",
        "\n",
        "def compute_distance_on_sphere(radius, point1, point2):\n",
        "    # Compute the distance between two points on a sphere given the radius and the angular separation\n",
        "    theta = math.acos(math.sin(point1[1]) * math.sin(point2[1]) * math.cos(point1[0] - point2[0]) + math.cos(point1[1]) * math.cos(point2[1]))\n",
        "    distance = radius * theta\n",
        "    return distance\n",
        "def generate_random_point_on_sphere(radius):\n",
        "    # Generate random spherical coordinates for a point on a sphere\n",
        "    theta = random.uniform(0, 2*math.pi)\n",
        "    phi = random.uniform(0, math.pi)\n",
        "\n",
        "    # Convert spherical coordinates to Cartesian coordinates\n",
        "    x = radius * math.sin(phi) * math.cos(theta)\n",
        "    y = radius * math.sin(phi) * math.sin(theta)\n",
        "    z = radius * math.cos(phi)\n",
        "\n",
        "    return x, y, z\n",
        "\n",
        "def compute_distance_on_sphere(radius, point1, point2):\n",
        "    # Compute the distance between two points on a sphere given the radius and the angular separation\n",
        "    theta = math.acos(math.sin(point1[1]) * math.sin(point2[1]) * math.cos(point1[0] - point2[0]) + math.cos(point1[1]) * math.cos(point2[1]))\n",
        "    distance = radius * theta\n",
        "    return distance\n",
        "\n",
        "def apply_pythagorean_theorem(cos_a, cos_b):\n",
        "    # Apply the Pythagorean theorem on a sphere\n",
        "    cos_c = cos_a * cos_b\n",
        "    c = math.acos(cos_c)\n",
        "    return c\n",
        "\n",
        "def generate_random_point_on_sphere(radius):\n",
        "    # Generate random spherical coordinates for a point on a sphere\n",
        "    theta = random.uniform(0, 2*math.pi)\n",
        "    phi = random.uniform(0, math.pi)\n",
        "\n",
        "    # Convert spherical coordinates to Cartesian coordinates\n",
        "    x = radius * math.sin(phi) * math.cos(theta)\n",
        "    y = radius * math.sin(phi) * math.sin(theta)\n",
        "    z = radius * math.cos(phi)\n",
        "\n",
        "    return x, y, z\n",
        "\n",
        "def compute_distance_on_sphere(radius, point1, point2):\n",
        "    # Compute the distance between two points on a sphere given the radius and the angular separation\n",
        "    theta = math.acos(math.sin(point1[1]) * math.sin(point2[1]) * math.cos(point1[0] - point2[0]) + math.cos(point1[1]) * math.cos(point2[1]))\n",
        "    distance = radius * theta\n",
        "    return distance\n",
        "\n",
        "def compute_perpendicular_distance_to_plane(radius, point, plane_normal):\n",
        "    # Compute the perpendicular distance from a point to a plane on a sphere\n",
        "    theta = math.acos(plane_normal[0] * point[0] + plane_normal[1] * point[1] + plane_normal[2] * point[2])\n",
        "    distance = radius * math.sin(theta)\n",
        "    return distance\n",
        "def generate_random_point_on_sphere(radius):\n",
        "    # Generate random spherical coordinates for a point on a sphere\n",
        "    theta = random.uniform(0, 2*math.pi)\n",
        "    phi = random.uniform(0, math.pi)\n",
        "\n",
        "    # Convert spherical coordinates to Cartesian coordinates\n",
        "    x = radius * math.sin(phi) * math.cos(theta)\n",
        "    y = radius * math.sin(phi) * math.sin(theta)\n",
        "    z = radius * math.cos(phi)\n",
        "\n",
        "    return x, y, z\n",
        "def compute_distance_on_sphere(radius, point1, point2):\n",
        "    # Compute the distance between two points on a sphere given the radius and the angular separation\n",
        "    theta = math.acos(math.sin(point1[1]) * math.sin(point2[1]) * math.cos(point1[0] - point2[0]) + math.cos(point1[1]) * math.cos(point2[1]))\n",
        "    distance = radius * theta\n",
        "    return distance\n",
        "def compute_zone_area(radius, height, theta):\n",
        "    # Compute the zone area between two parallel circles on a sphere\n",
        "    area = 2 * math.pi * radius * height * math.sin(theta)\n",
        "    return area\n",
        "def generate_random_spherical_triangle():\n",
        "    # Generate random angles for a spherical triangle\n",
        "    alpha = random.uniform(0, math.pi)\n",
        "    beta = random.uniform(0, math.pi)\n",
        "    gamma = math.pi - alpha - beta\n",
        "\n",
        "    return alpha, beta, gamma\n",
        "def calculate_lhuilier_area(a, b, c, A, B):\n",
        "    # Calculate the area of a spherical triangle using L'Huilier's Theorem\n",
        "    s = (a + b + c) / 2\n",
        "    numerator = math.tan((s - a) / 2)\n",
        "    denominator = math.sin(b) * math.sin(c) + math.sin(A) * math.sin(B) * math.cos(s)\n",
        "    triangle_area = 4 * math.atan(math.sqrt(abs(numerator / denominator)))\n",
        "    return triangle_area\n",
        "def calculate_spherical_pyramid_volume(base_area, height):\n",
        "    # Calculate the volume of a spherical pyramid\n",
        "    volume = (1/3) * base_area * height\n",
        "    return volume\n",
        "\n",
        "def calculate_spherical_pyramid_surface_area(base_area, lateral_area):\n",
        "    # Calculate the surface area of a spherical pyramid\n",
        "    surface_area = base_area + lateral_area\n",
        "    return surface_area\n",
        "\n",
        "def calculate_spherical_pyramid_base_area(radius):\n",
        "    # Calculate the base area of a spherical pyramid\n",
        "    base_area = 4 * math.pi * radius * radius\n",
        "    return base_area\n",
        "\n",
        "def calculate_spherical_pyramid_lateral_area(radius, slant_height):\n",
        "    # Calculate the lateral area of a spherical pyramid\n",
        "    lateral_area = 2 * math.pi * radius * slant_height\n",
        "    return lateral_area\n",
        "\n",
        "def calculate_spherical_excess(area, radius):\n",
        "  excess = area - math.pi * radius**2\n",
        "  return excess\n",
        "def calculate_gaussian_curvature(radius):\n",
        "  return 1 / (radius ** 2)\n",
        "def calculate_mean_curvature(radius):\n",
        "  return 1 / radius\n",
        "def calculate_principal_curvatures(radius):\n",
        "  k1 = 1/radius\n",
        "  k2 = 1/radius\n",
        "  return k1, k2\n",
        "\n",
        "def calculate_total_curvature(radius):\n",
        "  return 4 * math.pi\n",
        "def gauss_bonnet(K, kappa, g, ds, chi, dA):\n",
        "  integral_KdA = integrate.quad(lambda x: K, 0, 2*math.pi)[0]\n",
        "  integral_kgds = integrate.quad(lambda x: kappa*g*ds, 0, 2*math.pi)[0]\n",
        "\n",
        "  return integral_KdA + integral_kgds - 2*math.pi*chi\n",
        "\n",
        "def calculate_ricci_curvature(radius):\n",
        "  return 2 / radius**2\n",
        "def calculate_scalar_curvature(radius):\n",
        "  return 2 / radius**2\n",
        "def calculate_closure_defect(area, radius):\n",
        "  spherical_excess = area - math.pi * radius**2\n",
        "  return spherical_excess\n",
        "def calculate_angle_excess(area):\n",
        "  return area - math.pi\n",
        "def calculate_gaussian_curvature(radius):\n",
        "  return 1 / (radius ** 2)\n",
        "def calculate_einstein_tensor(R, Ricci):\n",
        "  G00 = 1/(R**2)\n",
        "  G11 = 1/(R**2)\n",
        "  G22 = 1/(R**2)\n",
        "  G33 = 1/(R**2)\n",
        "\n",
        "  return G00, G11, G22, G33\n",
        "\n",
        "\n",
        "\n",
        "# Generate random Cartesian coordinates\n",
        "data = np.random.rand(100, 3)\n",
        "\n",
        "radius_points = np.linalg.norm(data, axis=1)\n",
        "theta_points = np.arctan2(data[:, 1], data[:, 0])\n",
        "phi_points = np.arccos(data[:, 2] / radius_points)\n",
        "\n",
        "center = np.array([0, 0, 0])\n",
        "radius = 9556.51\n",
        "r = radius\n",
        "R = r\n",
        "r = R\n",
        "R = radius\n",
        "min_value_x = 0\n",
        "max_value_x = 100\n",
        "min_value_y = 0\n",
        "max_value_y = 100\n",
        "min_value_z = 0\n",
        "max_value_z = 100\n",
        "\n",
        "\n",
        "x = random.uniform(min_value_x, max_value_x)\n",
        "y = random.uniform(min_value_y, max_value_y)\n",
        "z = random.uniform(min_value_z, max_value_z)\n",
        "\n",
        "\n",
        "min_value_x = 0\n",
        "max_value_x = 100\n",
        "min_value_y = 0\n",
        "max_value_y = 100\n",
        "min_value_z = 0\n",
        "max_value_z = 100\n",
        "points = generate_random_points(100)\n",
        "\n",
        "# Calculate the Euclidean distance from each point to the center\n",
        "distances = np.linalg.norm(data - center, axis=1)\n",
        "\n",
        "# Count the number of points within the sphere\n",
        "num_points_within = np.sum(distances <= radius)\n",
        "\n",
        "# Calculate the diameter, volume, circumference, and surface area of the sphere\n",
        "diameter = 2 * radius\n",
        "volume = (4 / 3) * np.pi * radius ** 3\n",
        "circumference = 2 * np.pi * radius\n",
        "surface_area = 4 * np.pi * radius ** 2\n",
        "# Calculate the ratios\n",
        "ratio_circumference_surface_area_volume = circumference / (surface_area / volume)\n",
        "ratio_surface_area_circumference_volume = surface_area / (circumference / volume)\n",
        "ratio_volume_diameter_surface_area = volume / (diameter / surface_area)\n",
        "ratio_diameter_volume_surface_area = diameter / (volume / surface_area)\n",
        "ratio_circumference_volume_surface_area = circumference / (volume / surface_area)\n",
        "ratio_volume_circumference_surface_area = volume / (circumference / surface_area)\n",
        "ratio_surface_area_diameter_volume = surface_area / (diameter / volume)\n",
        "ratio_diameter_surface_area_volume = diameter / (surface_area / volume)\n",
        "ratio_circumference_surface_area_diameter = circumference / (surface_area / diameter)\n",
        "ratio_surface_area_circumference_diameter = surface_area / (circumference / diameter)\n",
        "ratio_volume_diameter_circumference = volume / (diameter / circumference)\n",
        "ratio_diameter_volume_circumference = diameter / (volume / circumference)\n",
        "latitudes, longitudes = calculate_latitude_longitude(points)\n",
        "\n",
        "# Convert Cartesian coordinates to spherical coordinates\n",
        "radius_points = np.linalg.norm(data, axis=1)\n",
        "theta_points = np.arctan2(data[:, 1], data[:, 0])\n",
        "phi_points = np.arccos(data[:, 2] / radius_points)\n",
        "\n",
        "# Convert Cartesian coordinates to radial distances\n",
        "x_coordinates = data[:, 0]\n",
        "y_coordinates = data[:, 1]\n",
        "z_coordinates = data[:, 2]\n",
        "radial_distance_x = np.sqrt(y_coordinates ** 2 + z_coordinates ** 2 + x_coordinates ** 2)\n",
        "radial_distance_y = np.sqrt(x_coordinates ** 2 + z_coordinates ** 2 + y_coordinates ** 2)\n",
        "radial_distance_z = np.sqrt(x_coordinates ** 2 + y_coordinates ** 2 + z_coordinates ** 2)\n",
        "# Convert Cartesian coordinates to azimuthal angles\n",
        "azimuthal_angle_x = np.arctan2(y_coordinates, x_coordinates)\n",
        "azimuthal_angle_y = np.arctan2(y_coordinates, x_coordinates)\n",
        "\n",
        "# Convert Cartesian coordinates to polar angles\n",
        "polar_angle_z = np.arccos(z_coordinates / radius_points)\n",
        "\n",
        "theta = 1.5\n",
        "r = 0.8\n",
        "phi = phi_points\n",
        "polar_angle = azimuthal_angle_to_polar_angle(theta, r)\n",
        "azimuthal_angle = polar_angle_to_azimuthal_angle(phi, r)\n",
        "radial_distance = polar_angle_to_radial_distance(phi, theta)\n",
        "polar_angle_2 = radial_distance_to_polar_angle(r, theta)\n",
        "radial_distance_2 = azimuthal_angle_to_radial_distance(theta, phi)\n",
        "azimuthal_angle_2 = radial_distance_to_azimuthal_angle(r, phi)\n",
        "latitude = z_coordinate_to_latitude(z, radius)\n",
        "longitude = math.degrees(math.atan2(y, x))\n",
        "x_result = radial_distance_to_x_coordinate(r, theta, phi)\n",
        "y_result = radial_distance_to_y_coordinate(r, theta, phi)\n",
        "z_result = radial_distance_to_z_coordinate(r, phi)\n",
        "surface_area_x = x_coordinate_to_surface_area(x)\n",
        "surface_area_y = y_coordinate_to_surface_area(y)\n",
        "surface_area_z = z_coordinate_to_surface_area(z)\n",
        "\n",
        "circumference_x = x_coordinate_to_circumference(x)\n",
        "circumference_y = y_coordinate_to_circumference(y)\n",
        "circumference_z = z_coordinate_to_circumference(z)\n",
        "points = generate_random_points(100)\n",
        "hemisphere1, hemisphere2 = divide_into_hemispheres(points)\n",
        "hemisphere1_latitudes, hemisphere1_longitudes = calculate_latitude_longitude(hemisphere1)\n",
        "hemisphere2_latitudes, hemisphere2_longitudes = calculate_latitude_longitude(hemisphere2)\n",
        "centroid = np.mean(data, axis=0)\n",
        "distances = np.linalg.norm(data - centroid, axis=1)\n",
        "radius = np.max(distances)\n",
        "min_height = np.min(data[:, 2])\n",
        "max_height = np.max(data[:, 2])\n",
        "points_within_cap = data[(distances <= radius) & (data[:, 2] >= min_height) & (data[:, 2] <= max_height)]\n",
        "surface_area = calculate_spherical_cap_surface_area(radius, max_height - min_height)\n",
        "volume = calculate_spherical_cap_volume(radius, max_height - min_height)\n",
        "centroid = np.mean(data, axis=0)\n",
        "distances = np.linalg.norm(data - centroid, axis=1)\n",
        "radius = np.max(distances)\n",
        "filtered_points = data[(data[:, 2] >= min_height) & (data[:, 2] <= max_height)]\n",
        "min_height = np.min(filtered_points[:, 2])\n",
        "max_height = np.max(filtered_points[:, 2])\n",
        "inner_radius = np.min(distances[(data[:, 2] >= min_height) & (data[:, 2] <= max_height)])\n",
        "\n",
        "surface_area = calculate_spherical_zone_surface_area(radius, max_height - min_height)\n",
        "volume = calculate_spherical_zone_volume(radius, inner_radius, max_height - min_height)\n",
        "theta_a, phi_a = generate_random_spherical_coordinates()\n",
        "theta_b, phi_b = generate_random_spherical_coordinates()\n",
        "theta_c, phi_c = generate_random_spherical_coordinates()\n",
        "\n",
        "# Convert spherical coordinates to Cartesian coordinates\n",
        "x_a, y_a, z_a = convert_spherical_to_cartesian(theta_a, phi_a, radius)\n",
        "x_b, y_b, z_b = convert_spherical_to_cartesian(theta_b, phi_b, radius)\n",
        "x_c, y_c, z_c = convert_spherical_to_cartesian(theta_c, phi_c, radius)\n",
        "\n",
        "# Calculate the sides of the spherical triangle using the dot product of Cartesian coordinates\n",
        "side_a = math.acos(x_b*x_c + y_b*y_c + z_b*z_c)\n",
        "side_b = math.acos(x_a*x_c + y_a*y_c + z_a*z_c)\n",
        "side_c = math.acos(x_a*x_b + y_a*y_b + z_a*z_b)\n",
        "\n",
        "# Calculate the angles of the spherical triangle using the distances between vertices\n",
        "alpha, beta, gamma = calculate_spherical_triangle_angles(side_a, side_b, side_c)\n",
        "\n",
        "# Convert the angles from radians to degrees if needed\n",
        "alpha_deg = math.degrees(alpha)\n",
        "beta_deg = math.degrees(beta)\n",
        "gamma_deg = math.degrees(gamma)\n",
        "\n",
        "# Calculate and print the area of the spherical triangle\n",
        "area = calculate_spherical_triangle_area(radius, alpha, beta, gamma)\n",
        "theta_a, phi_a = generate_random_spherical_coordinates()\n",
        "theta_b, phi_b = generate_random_spherical_coordinates()\n",
        "theta_c, phi_c = generate_random_spherical_coordinates()\n",
        "\n",
        "# Convert spherical coordinates to Cartesian coordinates\n",
        "x_a, y_a, z_a = convert_spherical_to_cartesian(theta_a, phi_a, radius)\n",
        "x_b, y_b, z_b = convert_spherical_to_cartesian(theta_b, phi_b, radius)\n",
        "x_c, y_c, z_c = convert_spherical_to_cartesian(theta_c, phi_c, radius)\n",
        "\n",
        "# Calculate the sides of the spherical triangle using the dot product of Cartesian coordinates\n",
        "side_a = math.acos(x_b*x_c + y_b*y_c + z_b*z_c)\n",
        "side_b = math.acos(x_a*x_c + y_a*y_c + z_a*z_c)\n",
        "side_c = math.acos(x_a*x_b + y_a*y_b + z_a*z_b)\n",
        "\n",
        "# Calculate the angles of the spherical triangle using the distancesbetween vertices\n",
        "alpha, beta, gamma = calculate_spherical_triangle_angles(side_a, side_b, side_c)\n",
        "\n",
        "# Convert the angles from radians to degrees if needed\n",
        "alpha_deg = math.degrees(alpha)\n",
        "beta_deg = math.degrees(beta)\n",
        "gamma_deg = math.degrees(gamma)\n",
        "\n",
        "# Calculate the missing sides and angles using the Law of Sines\n",
        "a, b, c, A, B, C = calculate_law_of_sines_sides(side_a, side_b, side_c, alpha, beta, gamma)\n",
        "\n",
        "# Calculate the missing angles using the Law of Tangents\n",
        "a, b, c, A, B, C = calculate_law_of_tangents(a, b, c, A, B, C)\n",
        "\n",
        "# Calculate and print the area of the spherical triangle\n",
        "area = calculate_spherical_triangle_area(radius, alpha, beta, gamma)\n",
        "\n",
        "points = []\n",
        "for _ in range(100):\n",
        "    point = generate_random_point_on_sphere(radius)\n",
        "    points.append(point)\n",
        "\n",
        "# Choose a random point for distance comparison\n",
        "random_index = random.randint(0, len(points)-1)\n",
        "random_point = points[random_index]\n",
        "\n",
        "# Compute distances between the random point and each other point\n",
        "distances = []\n",
        "for i in range(len(points)):\n",
        "    if i != random_index:\n",
        "        distance = compute_distance_on_sphere(radius, random_point, points[i])\n",
        "        distances.append(distance)\n",
        "\n",
        "points = []\n",
        "for _ in range(100):\n",
        "    point = generate_random_point_on_sphere(radius)\n",
        "    points.append(point)\n",
        "\n",
        "# Choose random indices for distance comparison\n",
        "index_a = random.randint(0, len(points)-1)\n",
        "index_b = random.randint(0, len(points)-1)\n",
        "while index_b == index_a:\n",
        "    index_b = random.randint(0, len(points)-1)\n",
        "\n",
        "point_a = points[index_a]\n",
        "point_b = points[index_b]\n",
        "\n",
        "# Compute distances between the selected points and a third random point\n",
        "dist_a = compute_distance_on_sphere(radius, point_a, point_b)\n",
        "dist_b = compute_distance_on_sphere(radius, point_b, point_a)\n",
        "\n",
        "# Apply the Pythagorean theorem on a sphere\n",
        "cos_a = math.cos(dist_a / radius)\n",
        "cos_b = math.cos(dist_b / radius)\n",
        "cos_c = apply_pythagorean_theorem(cos_a, cos_b)\n",
        "\n",
        "# Compute the distance between the selected points using the Pythagorean theorem\n",
        "dist_c = radius * math.acos(cos_c)\n",
        "\n",
        "alpha, beta, gamma = generate_random_spherical_triangle()\n",
        "\n",
        "# Convert angles to degrees for printing\n",
        "alpha_deg = math.degrees(alpha)\n",
        "beta_deg = math.degrees(beta)\n",
        "gamma_deg = math.degrees(gamma)\n",
        "min_height =   np.min(data[:, 2])\n",
        "max_height = np.max(data[:, 2])\n",
        "slant_height = random.uniform(min_height, max_height)\n",
        "base_area = calculate_spherical_pyramid_base_area(radius)\n",
        "lateral_area = calculate_spherical_pyramid_lateral_area(radius, slant_height)\n",
        "volume = calculate_spherical_pyramid_volume(base_area, slant_height)\n",
        "surface_area = calculate_spherical_pyramid_surface_area(base_area, lateral_area)\n",
        "# Calculate spherical triangle area\n",
        "area = calculate_spherical_triangle_area(radius, alpha, beta, gamma)\n",
        "gaussian_curvature = calculate_gaussian_curvature(radius)\n",
        "mean_curvature = calculate_mean_curvature(radius)\n",
        "# Calculate and print the spherical excess\n",
        "excess = calculate_spherical_excess(area, radius)\n",
        "k1, k2 = calculate_principal_curvatures(radius)\n",
        "K = 1/radius**2 # Gaussian curvature\n",
        "kappa = 1 # Geodesic curvature\n",
        "\n",
        "g = 1/(radius**2) # Metric tensor\n",
        "\n",
        "dtheta = 0.1\n",
        "dphi = 0.1\n",
        "dA = radius**2 * math.sin(dphi) * dtheta * dphi # Area element\n",
        "\n",
        "ds = dtheta * radius # Small arc length\n",
        "\n",
        "chi = 2 # Euler characteristic\n",
        "scalar_curvature = calculate_scalar_curvature(radius)\n",
        "area = calculate_spherical_triangle_area(radius, alpha, beta, gamma)\n",
        "closure_defect = calculate_closure_defect(area, radius)\n",
        "\n",
        "\n",
        "gb = gauss_bonnet(K, kappa, g, ds, chi, dA)\n",
        "ricci_curvature = calculate_ricci_curvature(radius)\n",
        "K = calculate_gaussian_curvature(radius)\n",
        "Ricci = 2/R**2\n",
        "G00, G11, G22, G33 = calculate_einstein_tensor(R, Ricci)\n",
        "g = np.array([[1, 0, 0],\n",
        "              [0, 1, 0],\n",
        "              [0, 0, 1]])\n",
        "\n",
        "print(\"Number of points within the sphere:\", num_points_within)\n",
        "print(\"Radius:\", radius)\n",
        "print(\"Diameter:\", diameter)\n",
        "print(\"Volume:\", volume)\n",
        "print(\"Circumference:\", circumference)\n",
        "print(\"Surface Area:\", surface_area)\n",
        "print(\"Circumference to Surface Area to Volume Ratio:\", ratio_circumference_surface_area_volume)\n",
        "print(\"Surface Area to Circumference to Volume Ratio:\", ratio_surface_area_circumference_volume)\n",
        "print(\"Volume to Diameter to Surface Area Ratio:\", ratio_volume_diameter_surface_area)\n",
        "print(\"Diameter to Volume to Surface Area Ratio:\", ratio_diameter_volume_surface_area)\n",
        "print(\"Circumference to Volume to Surface Area Ratio:\", ratio_circumference_volume_surface_area)\n",
        "print(\"Volume to Circumference to Surface Area Ratio:\", ratio_volume_circumference_surface_area)\n",
        "print(\"Surface Area to Diameter to Volume Ratio:\", ratio_surface_area_diameter_volume)\n",
        "print(\"Diameter to Surface Area to Volume Ratio:\", ratio_diameter_surface_area_volume)\n",
        "print(\"Circumference to Surface Area to Diameter Ratio:\", ratio_circumference_surface_area_diameter)\n",
        "print(\"Surface Area to Circumference to Diameter Ratio:\", ratio_surface_area_circumference_diameter)\n",
        "print(\"Volume to Diameter to Circumference Ratio:\", ratio_volume_diameter_circumference)\n",
        "print(\"Diameter to Volume to Circumference Ratio:\", ratio_diameter_volume_circumference)\n",
        "\n",
        "# Print converted spherical coordinates\n",
        "print(\"Spherical Coordinates:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- r:\", radius_points[i], \"theta:\", theta_points[i], \"phi:\", phi_points[i])\n",
        "\n",
        "# Print radial distances from Cartesian coordinates\n",
        "print(\"Radial Distances:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- x:\", x_coordinates[i], \"Radial Distance:\", radial_distance_x[i])\n",
        "    print(\"Point\", i + 1, \"- y:\", y_coordinates[i], \"Radial Distance:\", radial_distance_y[i])\n",
        "    print(\"Point\", i + 1, \"- z:\", z_coordinates[i], \"Radial Distance:\", radial_distance_z[i])\n",
        "\n",
        "# Print azimuthal angles from Cartesian coordinates\n",
        "print(\"Azimuthal Angles:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- x:\", x_coordinates[i], \"Azimuthal Angle:\", azimuthal_angle_x[i])\n",
        "    print(\"Point\", i + 1, \"- y:\", y_coordinates[i], \"Azimuthal Angle:\", azimuthal_angle_y[i])\n",
        "\n",
        "# Print polar angles from Cartesian coordinates\n",
        "print(\"Polar Angles:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- z:\", z_coordinates[i], \"Polar Angle:\", polar_angle_z[i])\n",
        "points = []\n",
        "for _ in range(100):\n",
        "    point = generate_random_point_on_sphere(radius)\n",
        "    points.append(point)\n",
        "\n",
        "# Choose a random plane represented by its normal vector\n",
        "plane_normal = (random.uniform(-1, 1), random.uniform(-1, 1), random.uniform(-1, 1))\n",
        "plane_normal = tuple(coord / math.sqrt(plane_normal[0]**2 + plane_normal[1]**2 + plane_normal[2]**2) for coord in plane_normal)\n",
        "\n",
        "# Choose a random point for distance calculation\n",
        "random_index = random.randint(0, len(points)-1)\n",
        "random_point = points[random_index]\n",
        "min_height =np.min(filtered_points[:, 2])  # Minimum height value\n",
        "max_height = np.max(filtered_points[:, 2])  # Maximum height value\n",
        "height = random.uniform(min_height, max_height)\n",
        "\n",
        "zone_area = compute_zone_area(radius, height, theta)\n",
        "total_curvature = calculate_total_curvature(radius)\n",
        "area = calculate_spherical_triangle_area(radius, alpha, beta, gamma)\n",
        "angle_excess = calculate_angle_excess(area)\n",
        "\n",
        "\n",
        "# Compute the perpendicular distance from the random point to the plane\n",
        "distance = compute_perpendicular_distance_to_plane(radius, random_point, plane_normal)\n",
        "# Print the converted values\n",
        "print(\"Polar Angle (θ):\", polar_angle)\n",
        "print(\"Azimuthal Angle (φ):\", azimuthal_angle)\n",
        "print(\"Radial Distance (r):\", radial_distance)\n",
        "print(\"Polar Angle (θ) from Radial Distance (r):\", polar_angle_2)\n",
        "print(\"Radial Distance (r) from Azimuthal Angle (φ):\", radial_distance_2)\n",
        "print(\"Azimuthal Angle (φ) from Radial Distance (r):\", azimuthal_angle_2)\n",
        "print(\"x-coordinate:\", x_result)\n",
        "print(\"y-coordinate:\", y_result)\n",
        "print(\"z-coordinate:\", z_result)\n",
        "print(\"Surface area based on x-coordinate:\", surface_area_x)\n",
        "print(\"Surface area based on y-coordinate:\", surface_area_y)\n",
        "print(\"Surface area based on z-coordinate:\", surface_area_z)\n",
        "print(\"Number of points within the sphere:\", num_points_within)\n",
        "print(\"Radius:\", radius)\n",
        "print(\"Diameter:\", diameter)\n",
        "print(\"Volume:\", volume)\n",
        "print(\"Circumference:\", circumference)\n",
        "print(\"Surface Area:\", surface_area)\n",
        "print(\"Circumference to Surface Area to Volume Ratio:\", ratio_circumference_surface_area_volume)\n",
        "print(\"Surface Area to Circumference to Volume Ratio:\", ratio_surface_area_circumference_volume)\n",
        "print(\"Volume to Diameter to Surface Area Ratio:\", ratio_volume_diameter_surface_area)\n",
        "print(\"Diameter to Volume to Surface Area Ratio:\", ratio_diameter_volume_surface_area)\n",
        "print(\"Circumference to Volume to Surface Area Ratio:\", ratio_circumference_volume_surface_area)\n",
        "print(\"Volume to Circumference to Surface Area Ratio:\", ratio_volume_circumference_surface_area)\n",
        "print(\"Surface Area to Diameter to Volume Ratio:\", ratio_surface_area_diameter_volume)\n",
        "print(\"Diameter to Surface Area to Volume Ratio:\", ratio_diameter_surface_area_volume)\n",
        "print(\"Circumference to Surface Area to Diameter Ratio:\", ratio_circumference_surface_area_diameter)\n",
        "print(\"Surface Area to Circumference to Diameter Ratio:\", ratio_surface_area_circumference_diameter)\n",
        "print(\"Volume to Diameter to Circumference Ratio:\", ratio_volume_diameter_circumference)\n",
        "print(\"Diameter to Volume to Circumference Ratio:\", ratio_diameter_volume_circumference)\n",
        "\n",
        "# Print converted spherical coordinates\n",
        "print(\"Spherical Coordinates:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- r:\", radius_points[i], \"theta:\", theta_points[i], \"phi:\", phi_points[i])\n",
        "\n",
        "# Print radial distances from Cartesian coordinates\n",
        "print(\"Radial Distances:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- x:\", x_coordinates[i], \"Radial Distance:\", radial_distance_x[i])\n",
        "    print(\"Point\", i + 1, \"- y:\", y_coordinates[i], \"Radial Distance:\", radial_distance_y[i])\n",
        "    print(\"Point\", i + 1, \"- z:\", z_coordinates[i], \"Radial Distance:\", radial_distance_z[i])\n",
        "\n",
        "# Print azimuthal angles from Cartesian coordinates\n",
        "print(\"Azimuthal Angles:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- x:\", x_coordinates[i], \"Azimuthal Angle:\", azimuthal_angle_x[i])\n",
        "    print(\"Point\", i + 1, \"- y:\", y_coordinates[i], \"Azimuthal Angle:\", azimuthal_angle_y[i])\n",
        "\n",
        "# Print polar angles from Cartesian coordinates\n",
        "print(\"Polar Angles:\")\n",
        "for i in range(len(data)):\n",
        "    print(\"Point\", i + 1, \"- z:\", z_coordinates[i], \"Polar Angle:\", polar_angle_z[i])\n",
        "\n",
        "# Print the converted values\n",
        "print(\"Polar Angle (θ):\", polar_angle)\n",
        "print(\"Azimuthal Angle (φ):\", azimuthal_angle)\n",
        "print(\"Radial Distance (r):\", radial_distance)\n",
        "print(\"Polar Angle (θ) from Radial Distance (r):\", polar_angle_2)\n",
        "print(\"Radial Distance (r) from Azimuthal Angle (φ):\", radial_distance_2)\n",
        "print(\"Azimuthal Angle (φ) from Radial Distance (r):\", azimuthal_angle_2)\n",
        "print(\"x-coordinate:\", x_result)\n",
        "print(\"y-coordinate:\", y_result)\n",
        "print(\"z-coordinate:\", z_result)\n",
        "print(\"Surface area based on x-coordinate:\", surface_area_x)\n",
        "print(\"Surface area based on y-coordinate:\", surface_area_y)\n",
        "print(\"Surface area based on z-coordinate:\", surface_area_z)\n",
        "print(\"Circumference based on x-coordinate:\", circumference_x)\n",
        "print(\"Circumference based on y-coordinate:\", circumference_y)\n",
        "print(\"Circumference based on z-coordinate:\", circumference_z)\n",
        "print(\"Latitude based on z-coordinate:\", latitude)\n",
        "print(f\"Longitude: {longitude}\")\n",
        "for i in range(len(points)):\n",
        "    print(f\"Point {i+1}: Latitude = {latitudes[i]}, Longitude = {longitudes[i]}\")\n",
        "    # Print hemisphere 1 results\n",
        "print(\"Hemisphere 1:\")\n",
        "for i in range(len(hemisphere1)):\n",
        "\n",
        "    print(f\"Point {i+1}: Latitude = {hemisphere1_latitudes[i]}, Longitude = {hemisphere1_longitudes[i]}\")\n",
        "\n",
        "# Print hemisphere 2 results\n",
        "print(\"\\nHemisphere 2:\")\n",
        "for i in range(len(hemisphere2)):\n",
        "    print(f\"Point {i+1}: Latitude = {hemisphere2_latitudes[i]}, Longitude = {hemisphere2_longitudes[i]}\")\n",
        "for angle in central_angles:\n",
        "     sector_area = calculate_sector_area(angle, radius)\n",
        "print(f\"Central Angle: {angle} degrees, Sector Area: {sector_area}\")\n",
        "for angle in central_angles:\n",
        "    segment_area = calculate_segment_area(angle, radius)\n",
        "    print(f\"Central Angle: {angle} degrees, Segment Area: {segment_area}\")\n",
        "    print(f\"Spherical Cap Surface Area: {surface_area}\")\n",
        "print(f\"Spherical Cap Volume: {volume}\")\n",
        "print(f\"Spherical Zone Surface Area: {surface_area}\")\n",
        "print(f\"Spherical Zone Volume: {volume}\")\n",
        "volume = calculate_spherical_segment_volume(segment_area, radius, min_height, max_height)\n",
        "print(f\"Spherical Segment Volume: {volume}\")\n",
        "print(\"Spherical Triangle Angles (in degrees):\")\n",
        "print(f\"Alpha: {alpha_deg}°, Beta: {beta_deg}°, Gamma: {gamma_deg}°\")\n",
        "print(f\"Spherical Triangle Area: {area}\")\n",
        "polygon_area = calculate_spherical_polygon_area(radius, [(alpha, beta, gamma)])\n",
        "print(\"Area of the spherical polygon:\", polygon_area)\n",
        "for distance in distances:\n",
        "    print(\"Distance:\", distance)\n",
        "    print(\"Distance a:\", dist_a)\n",
        "print(\"Distance b:\", dist_b)\n",
        "print(\"Distance c (computed using the Pythagorean theorem):\", dist_c)\n",
        "print(\"Perpendicular distance from point to plane:\", distance)\n",
        "print(\"Zone area between two parallel circles:\", zone_area)\n",
        "print(\"Spherical Triangle Angles (in degrees):\")\n",
        "print(f\"Alpha: {alpha_deg}°, Beta: {beta_deg}°, Gamma: {gamma_deg}°\")\n",
        "\n",
        "# Calculate the side lengths of the spherical triangle using the radius\n",
        "a = radius\n",
        "b = radius\n",
        "c = radius\n",
        "\n",
        "# Convert angles to radians for L'Huilier's Theorem\n",
        "A = alpha\n",
        "B = beta\n",
        "\n",
        "# Calculate the area of the spherical triangle using L'Huilier's Theorem\n",
        "triangle_area = calculate_lhuilier_area(a, b, c, A, B)\n",
        "print(f\"Spherical Triangle Area: {triangle_area}\")\n",
        "\n",
        "# Calculate the area of the spherical polygon\n",
        "polygon_area = triangle_area  # In this example, the polygon is just a single triangle\n",
        "print(\"Area of the spherical polygon:\", polygon_area)\n",
        "print(\"Spherical Pyramid Properties:\")\n",
        "print(\"Base Area:\", base_area)\n",
        "print(\"Lateral Area:\", lateral_area)\n",
        "print(\"Volume:\", volume)\n",
        "print(\"Surface Area:\", surface_area)\n",
        "print(\"Spherical excess:\", excess)\n",
        "print(\"Gaussian curvature:\", gaussian_curvature)\n",
        "print(\"Mean curvature:\", mean_curvature)\n",
        "print(\"Principal curvature 1:\", k1)\n",
        "print(\"Principal curvature 2:\", k2)\n",
        "print(\"Total curvature:\", total_curvature)\n",
        "print(\"Gauss-Bonnet:\", gb)\n",
        "print(\"Ricci curvature:\", ricci_curvature)\n",
        "print(\"Scalar curvature:\", scalar_curvature)\n",
        "print(\"Closure defect from parallel transport:\", closure_defect)\n",
        "print(\"Angle excess:\", angle_excess)\n",
        "print(\"Gaussian curvature K:\", K)\n",
        "print(\"Einstein G00:\", G00)\n",
        "print(\"Einstein G11:\", G11)\n",
        "print(\"Einstein G22:\", G22)\n",
        "print(\"Einstein G33:\", G33)"
      ],
      "metadata": {
        "id": "B3ZEnte19rhK"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}